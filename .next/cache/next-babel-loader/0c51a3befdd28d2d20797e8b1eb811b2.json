{"ast":null,"code":"var _jsxFileName = \"C:\\\\Authentication-react-hooks\\\\src\\\\Speakers.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useContext, useReducer, useCallback, useMemo } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../static/site.css\";\nimport { Header } from \"../src/Header\";\nimport { Menu } from \"../src/Menu\";\nimport SpeakerData from \"./SpeakerData\";\nimport SpeakerDetail from \"./SpeakerDetail\";\nimport { ConfigContext } from \"./App\";\nimport speakersReducer from \"./speakersReducer\";\n\nconst Speakers = ({}) => {\n  const {\n    0: speakingSaturday,\n    1: setSpeakingSaturday\n  } = useState(true);\n  const {\n    0: speakingSunday,\n    1: setSpeakingSunday\n  } = useState(true);\n  const {\n    0: speakerList,\n    1: dispatch\n  } = useReducer(speakersReducer, []);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  const context = useContext(ConfigContext);\n  useEffect(() => {\n    setIsLoading(true);\n    new Promise(function (resolve) {\n      setTimeout(function () {\n        resolve();\n      }, 1000);\n    }).then(() => {\n      setIsLoading(false);\n      const speakerListServerFilter = SpeakerData.filter(({\n        sat,\n        sun\n      }) => {\n        return speakingSaturday && sat || speakingSunday && sun;\n      });\n      dispatch({\n        type: \"setSpeakerList\",\n        data: speakerListServerFilter\n      });\n    });\n    return () => {\n      console.log(\"cleanup\");\n    };\n  }, []); // [speakingSunday, speakingSaturday]);\n\n  const handleChangeSaturday = () => {\n    setSpeakingSaturday(!speakingSaturday);\n  };\n\n  const handleChangeSunday = () => {\n    setSpeakingSunday(!speakingSunday);\n  };\n\n  const heartFavoriteHandler = useCallback((e, favoriteValue) => {\n    e.preventDefault();\n    const sessionId = parseInt(e.target.attributes[\"data-sessionid\"].value);\n    dispatch({\n      type: favoriteValue === true ? \"favorite\" : \"unfavorite\",\n      sessionId\n    });\n  }, []);\n  const newSpeakerList = useMemo(() => speakerList.filter(({\n    sat,\n    sun\n  }) => speakingSaturday && sat || speakingSunday && sun).sort(function (a, b) {\n    if (a.firstName < b.firstName) {\n      return -1;\n    }\n\n    if (a.firstName > b.firstName) {\n      return 1;\n    }\n\n    return 0;\n  }), [speakingSaturday, speakingSunday, speakerList]);\n  const speakerListFiltered = isLoading ? [] : newSpeakerList;\n  if (isLoading) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }\n  }, \"Loading...\");\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }), __jsx(Menu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"btn-toolbar  margintopbottom5 checkbox-bigger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, context.showSpeakerSpeakingDays === false ? null : __jsx(\"div\", {\n    className: \"hide\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"form-check-inline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, __jsx(\"label\", {\n    className: \"form-check-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }, __jsx(\"input\", {\n    type: \"checkbox\",\n    className: \"form-check-input\",\n    onChange: handleChangeSaturday,\n    checked: speakingSaturday,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }), \"Saturday Speakers\")), __jsx(\"div\", {\n    className: \"form-check-inline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, __jsx(\"label\", {\n    className: \"form-check-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }, __jsx(\"input\", {\n    type: \"checkbox\",\n    className: \"form-check-input\",\n    onChange: handleChangeSunday,\n    checked: speakingSunday,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }), \"Sunday Speakers\")))), __jsx(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"card-deck\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, speakerListFiltered.map(({\n    id,\n    firstName,\n    lastName,\n    bio,\n    favorite\n  }) => {\n    return __jsx(SpeakerDetail, {\n      key: id,\n      id: id,\n      favorite: favorite,\n      onHeartFavoriteHandler: heartFavoriteHandler,\n      firstName: firstName,\n      lastName: lastName,\n      bio: bio,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 19\n      }\n    });\n  })))));\n};\n\nexport default Speakers;","map":{"version":3,"sources":["C:/Authentication-react-hooks/src/Speakers.js"],"names":["React","useState","useEffect","useContext","useReducer","useCallback","useMemo","Header","Menu","SpeakerData","SpeakerDetail","ConfigContext","speakersReducer","Speakers","speakingSaturday","setSpeakingSaturday","speakingSunday","setSpeakingSunday","speakerList","dispatch","isLoading","setIsLoading","context","Promise","resolve","setTimeout","then","speakerListServerFilter","filter","sat","sun","type","data","console","log","handleChangeSaturday","handleChangeSunday","heartFavoriteHandler","e","favoriteValue","preventDefault","sessionId","parseInt","target","attributes","value","newSpeakerList","sort","a","b","firstName","speakerListFiltered","showSpeakerSpeakingDays","map","id","lastName","bio","favorite"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,UAAjD,EAA4DC,WAA5D,EAAyEC,OAAzE,QAAuF,OAAvF;AAEA,OAAO,sCAAP;AACA,OAAO,oBAAP;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,aAAT,QAA8B,OAA9B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,MAAMC,QAAQ,GAAG,CAAC,EAAD,KAAQ;AACvB,QAAM;AAAA,OAACC,gBAAD;AAAA,OAAmBC;AAAnB,MAA0Cd,QAAQ,CAAC,IAAD,CAAxD;AACA,QAAM;AAAA,OAACe,cAAD;AAAA,OAAiBC;AAAjB,MAAsChB,QAAQ,CAAC,IAAD,CAApD;AAGA,QAAM;AAAA,OAACiB,WAAD;AAAA,OAAaC;AAAb,MAAyBf,UAAU,CAACQ,eAAD,EAAkB,EAAlB,CAAzC;AAEA,QAAM;AAAA,OAACQ,SAAD;AAAA,OAAYC;AAAZ,MAA4BpB,QAAQ,CAAC,IAAD,CAA1C;AAEA,QAAMqB,OAAO,GAAGnB,UAAU,CAACQ,aAAD,CAA1B;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,QAAIE,OAAJ,CAAY,UAASC,OAAT,EAAkB;AAC5BC,MAAAA,UAAU,CAAC,YAAW;AACpBD,QAAAA,OAAO;AACR,OAFS,EAEP,IAFO,CAAV;AAGD,KAJD,EAIGE,IAJH,CAIQ,MAAM;AACZL,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,YAAMM,uBAAuB,GAAGlB,WAAW,CAACmB,MAAZ,CAAmB,CAAC;AAAEC,QAAAA,GAAF;AAAOC,QAAAA;AAAP,OAAD,KAAkB;AACnE,eAAQhB,gBAAgB,IAAIe,GAArB,IAA8Bb,cAAc,IAAIc,GAAvD;AACD,OAF+B,CAAhC;AAGAX,MAAAA,QAAQ,CAAC;AACPY,QAAAA,IAAI,EAAE,gBADC;AAEPC,QAAAA,IAAI,EAAEL;AAFC,OAAD,CAAR;AAID,KAbD;AAcA,WAAO,MAAM;AACXM,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,KAFD;AAGD,GAnBQ,EAmBN,EAnBM,CAAT,CAXuB,CA8Bf;;AAER,QAAMC,oBAAoB,GAAG,MAAM;AACjCpB,IAAAA,mBAAmB,CAAC,CAACD,gBAAF,CAAnB;AACD,GAFD;;AAGA,QAAMsB,kBAAkB,GAAG,MAAM;AAC/BnB,IAAAA,iBAAiB,CAAC,CAACD,cAAF,CAAjB;AACD,GAFD;;AAGA,QAAMqB,oBAAoB,GAAGhC,WAAW,CAAC,CAACiC,CAAD,EAAIC,aAAJ,KAAsB;AAC7DD,IAAAA,CAAC,CAACE,cAAF;AACA,UAAMC,SAAS,GAAGC,QAAQ,CAACJ,CAAC,CAACK,MAAF,CAASC,UAAT,CAAoB,gBAApB,EAAsCC,KAAvC,CAA1B;AACA1B,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAEQ,aAAa,KAAK,IAAlB,GAAyB,UAAzB,GAAsC,YADrC;AAEPE,MAAAA;AAFO,KAAD,CAAR;AAID,GAPuC,EAOtC,EAPsC,CAAxC;AASA,QAAMK,cAAc,GAAGxC,OAAO,CAAC,MAAMY,WAAW,CAC3CU,MADgC,CAE7B,CAAC;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,GAAD,KAAmBhB,gBAAgB,IAAIe,GAArB,IAA8Bb,cAAc,IAAIc,GAFrC,EAIhCiB,IAJgC,CAI3B,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACnB,QAAID,CAAC,CAACE,SAAF,GAAcD,CAAC,CAACC,SAApB,EAA+B;AAC7B,aAAO,CAAC,CAAR;AACD;;AACD,QAAIF,CAAC,CAACE,SAAF,GAAcD,CAAC,CAACC,SAApB,EAA+B;AAC7B,aAAO,CAAP;AACD;;AACD,WAAO,CAAP;AACD,GAZgC,CAAP,EAYvB,CAACpC,gBAAD,EAAmBE,cAAnB,EAAmCE,WAAnC,CAZuB,CAA9B;AAcA,QAAMiC,mBAAmB,GAAG/B,SAAS,GACjC,EADiC,GAEjC0B,cAFJ;AAIA,MAAI1B,SAAJ,EAAe,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAEf,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,+CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,OAAO,CAAC8B,uBAAR,KAAoC,KAApC,GAA4C,IAA5C,GACD;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,SAAS,EAAC,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,SAAS,EAAC,kBAFZ;AAGE,IAAA,QAAQ,EAAEjB,oBAHZ;AAIE,IAAA,OAAO,EAAErB,gBAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,sBADF,CADF,EAYE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,SAAS,EAAC,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,SAAS,EAAC,kBAFZ;AAGE,IAAA,QAAQ,EAAEsB,kBAHZ;AAIE,IAAA,OAAO,EAAEpB,cAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,oBADF,CAZF,CAFF,CADF,EA6BE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGmC,mBAAmB,CAACE,GAApB,CACC,CAAC;AAAEC,IAAAA,EAAF;AAAMJ,IAAAA,SAAN;AAAiBK,IAAAA,QAAjB;AAA2BC,IAAAA,GAA3B;AAAgCC,IAAAA;AAAhC,GAAD,KAAgD;AAC9C,WACE,MAAC,aAAD;AACE,MAAA,GAAG,EAAEH,EADP;AAEE,MAAA,EAAE,EAAEA,EAFN;AAGE,MAAA,QAAQ,EAAEG,QAHZ;AAIE,MAAA,sBAAsB,EAAEpB,oBAJ1B;AAKE,MAAA,SAAS,EAAEa,SALb;AAME,MAAA,QAAQ,EAAEK,QANZ;AAOE,MAAA,GAAG,EAAEC,GAPP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAWD,GAbF,CADH,CADF,CA7BF,CAHF,CADF;AAuDD,CA1HD;;AA4HA,eAAe3C,QAAf","sourcesContent":["import React, { useState, useEffect, useContext, useReducer,useCallback, useMemo} from \"react\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../static/site.css\";\nimport { Header } from \"../src/Header\";\nimport { Menu } from \"../src/Menu\";\nimport SpeakerData from \"./SpeakerData\";\nimport SpeakerDetail from \"./SpeakerDetail\";\nimport { ConfigContext } from \"./App\";\nimport speakersReducer from \"./speakersReducer\";\n\nconst Speakers = ({}) => {\n  const [speakingSaturday, setSpeakingSaturday] = useState(true);\n  const [speakingSunday, setSpeakingSunday] = useState(true);\n\n\n  const [speakerList,dispatch] = useReducer(speakersReducer, []);\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  const context = useContext(ConfigContext);\n\n  useEffect(() => {\n    setIsLoading(true);\n    new Promise(function(resolve) {\n      setTimeout(function() {\n        resolve();\n      }, 1000);\n    }).then(() => {\n      setIsLoading(false);\n      const speakerListServerFilter = SpeakerData.filter(({ sat, sun }) => {\n        return (speakingSaturday && sat) || (speakingSunday && sun);\n      });\n      dispatch({\n        type: \"setSpeakerList\",\n        data: speakerListServerFilter\n      });\n    });\n    return () => {\n      console.log(\"cleanup\");\n    };\n  }, []); // [speakingSunday, speakingSaturday]);\n\n  const handleChangeSaturday = () => {\n    setSpeakingSaturday(!speakingSaturday);\n  };\n  const handleChangeSunday = () => {\n    setSpeakingSunday(!speakingSunday);\n  };\n  const heartFavoriteHandler = useCallback((e, favoriteValue) => {\n    e.preventDefault();\n    const sessionId = parseInt(e.target.attributes[\"data-sessionid\"].value);\n    dispatch({\n      type: favoriteValue === true ? \"favorite\" : \"unfavorite\",\n      sessionId\n    });\n  },[]);\n\n  const newSpeakerList = useMemo(() => speakerList\n      .filter(\n          ({ sat, sun }) => (speakingSaturday && sat) || (speakingSunday && sun)\n      )\n      .sort(function(a, b) {\n        if (a.firstName < b.firstName) {\n          return -1;\n        }\n        if (a.firstName > b.firstName) {\n          return 1;\n        }\n        return 0;\n      }),[speakingSaturday, speakingSunday, speakerList])\n\n  const speakerListFiltered = isLoading\n    ? []\n    : newSpeakerList;\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div>\n      <Header />\n      <Menu />\n      <div className=\"container\">\n        <div className=\"btn-toolbar  margintopbottom5 checkbox-bigger\">\n          {context.showSpeakerSpeakingDays === false ? null : (\n          <div className=\"hide\">\n            <div className=\"form-check-inline\">\n              <label className=\"form-check-label\">\n                <input\n                  type=\"checkbox\"\n                  className=\"form-check-input\"\n                  onChange={handleChangeSaturday}\n                  checked={speakingSaturday}\n                />\n                Saturday Speakers\n              </label>\n            </div>\n            <div className=\"form-check-inline\">\n              <label className=\"form-check-label\">\n                <input\n                  type=\"checkbox\"\n                  className=\"form-check-input\"\n                  onChange={handleChangeSunday}\n                  checked={speakingSunday}\n                />\n                Sunday Speakers\n              </label>\n            </div>\n          </div>\n              )}\n        </div>\n        <div className=\"row\">\n          <div className=\"card-deck\">\n            {speakerListFiltered.map(\n              ({ id, firstName, lastName, bio, favorite }) => {\n                return (\n                  <SpeakerDetail\n                    key={id}\n                    id={id}\n                    favorite={favorite}\n                    onHeartFavoriteHandler={heartFavoriteHandler}\n                    firstName={firstName}\n                    lastName={lastName}\n                    bio={bio}\n                  />\n                );\n              }\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Speakers;\n"]},"metadata":{},"sourceType":"module"}